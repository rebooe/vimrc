-- -- note: diagnostics are not exclusive to lsp servers
-- -- so these can be global keybindings
-- vim.keymap.set('n', 'gl', '<cmd>lua vim.diagnostic.open_float()<cr>')
-- vim.keymap.set('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<cr>')
-- vim.keymap.set('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<cr>')

-- vim.api.nvim_create_autocmd('LspAttach', {
-- 	desc = 'LSP actions',
-- 	callback = function(event)
-- 		local opts = { buffer = event.buf }

-- 		-- these will be buffer-local keybindings
-- 		-- because they only work if you have an active language server

-- 		vim.keymap.set('n', 'K', '<cmd>lua vim.lsp.buf.hover()<cr>', opts)
-- 		vim.keymap.set('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<cr>', opts)
-- 		vim.keymap.set('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<cr>', opts)
-- 		vim.keymap.set('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<cr>', opts)
-- 		vim.keymap.set('n', 'go', '<cmd>lua vim.lsp.buf.type_definition()<cr>', opts)
-- 		vim.keymap.set('n', 'gr', '<cmd>lua vim.lsp.buf.references()<cr>', opts)
-- 		vim.keymap.set('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<cr>', opts)
-- 		vim.keymap.set('n', '<F2>', '<cmd>lua vim.lsp.buf.rename()<cr>', opts)
-- 		vim.keymap.set({ 'n', 'x' }, '<F3>', '<cmd>lua vim.lsp.buf.format({async = true})<cr>', opts)
-- 		vim.keymap.set('n', '<F4>', '<cmd>lua vim.lsp.buf.code_action()<cr>', opts)
-- 	end
-- })

-- local lsp_capabilities = require('cmp_nvim_lsp').default_capabilities()
-- local default_setup = function(server)
-- 	require('lspconfig')[server].setup({
-- 		capabilities = lsp_capabilities,
-- 	})
-- end

-- require('mason').setup({})
-- require('mason-lspconfig').setup({
-- 	ensure_installed = {},
-- 	handlers = {
-- 		default_setup,
-- 	},
-- })

-- local cmp = require('cmp')
-- cmp.setup({
-- 	sources = {
-- 		{ name = 'nvim_lsp' },
-- 		{ name = 'vsnip' },
-- 	},
-- 	mapping = cmp.mapping.preset.insert({
-- 		['<C-b>'] = cmp.mapping.scroll_docs(-4),
-- 		['<C-f>'] = cmp.mapping.scroll_docs(4),
-- 		['<C-Space>'] = cmp.mapping.complete(),
-- 		['<C-e>'] = cmp.mapping.abort(),
-- 		['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
-- 	}),
-- 	snippet = {
-- 		-- REQUIRED - you must specify a snippet engine
-- 		expand = function(args)
-- 			vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
-- 			-- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
-- 			-- require('snippy').expand_snippet(args.body) -- For `snippy` users.
-- 			-- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
-- 			-- vim.snippet.expand(args.body) -- For native neovim snippets (Neovim v0.10+)
-- 		end,
-- 	},
-- })
